import sys
sys.stdin = open('input.txt')

T = 10
for tc in range(1, T+1):
    N = int(input())
    data = [list(map(int, input().split())) for _ in range(N)]

    cnt = 0                                         # 교착상태 개수 초기화
    for i in range(100):                            # 전체 행을 순환
        stack = []                                  # 1(N극)을 저장할 리스트
        for j in range(100):                        # 전체 열을 순환
            if data[j][i] == 1:                     # 열을 우선적으로 돌면서 1을 만나면
                stack.append(data[j][i])            # stack에 1을 추가
            elif data[j][i] == 2:                   # 열을 돌면서 2를 만나고
                if stack:                           # stack이 비어있지 않았다면
                    cnt += 1                        # 교착상태이므로 개수 +1
                    stack.clear()                   # 교착상태가 되면, stack을 모두 지워주고 다시 반복

    print('#{} {}'.format(tc, cnt))











    # 1은 N의 성질(위) 2는 S의 성질(아래)

    # 테이블 위에 존재하는 이동 가능한 모든 요소의 수를 카운팅 (1 혹은 2)
    # 1은 아래로, 2는 위로


    # 2차원ㄹ ㅣ스트 전수조사


    # 1을 만났다.
        # N극 자성체 -> 아래로만 이동
            # 1. 벽 체크 -> 벽을 벗어나면 사라짐 -> 현재 위치 값 0으로 바뀜
                # 1-1. 사라짐 -> 움직일 수 있는 개체수 -1
            # 2. S극 체크 -> S극과 N극이 만나면 교착상태
            # 3. 교착상태를 표기할 수 있는 방법? -> 3으로 바꾼다. (교착 개수 + 1)
                # 3-1. 나와 내 아래가 모두 움직일 수 없게됨 -> 개체수 -2
            # 4. 처음부터 교착상태인 애들을 만나면, 나만 교착상태로 만들어줌 (교착 개수 유지)
                # 4-1. 나만 교착상태 -> 움직 일 수 있는 개체수 -1

            # 움직일 수 있는 개체수 유지
            # 5. N극을 만나면? -> 대기
            # 6. 아무것도 아니면 -> 한칸 아래로 이동
    # 2를 만났다.
        # S극 자성체 -> 위로만 이동
            # 1. 벽 체크 -> 벽을 벗어나면 사라짐 -> 현재 위치 값 0으로 바뀜
            # 1-1. 사라짐 -> 움직일 수 있는 개체수 -1
            # 2. S극 체크 -> S극과 N극이 만나면 교착상태
            # 3. 교착상태를 표기할 수 있는 방법? -> 3으로 바꾼다. (교착 개수 + 1)
            # 3-1. 나와 내 아래가 모두 움직일 수 없게됨 -> 개체수 -2
            # 4. 처음부터 교착상태인 애들을 만나면, 나만 교착상태로 만들어줌 (교착 개수 유지)
            # 4-1. 나만 교착상태 -> 움직 일 수 있는 개체수 -1

            # 움직일 수 있는 개체수 유지
            # 5. N극을 만나면? -> 대기
            # 6. 아무것도 아니면 -> 한칸 아래로 이동

    # 다하고 2차원리스트가 3으로 남았는지 확인하기



# 1. 사라짐
# 2. 교착
# 3. D 끼리 상하로 붙어있으면 1개로 따짐
# 4. C,D는 좌우로 인접 시, 2개로 따짐

# 신경 써야 할 것.
# 2차원 리스트이고
# 열에 대한 정보만 있으면 됨. (위 아래로만 이동 할 수 있는 것)
# 열 우선 탐색!
# 신경 써야 할 교착상태는 D.
# 빨강이랑 파랑 붙은 교착상태에서 빨강 뒤에 빨강 붙는 건 교착 상태 아님.
#