"""
이 문제는 그리디 기법을 활용해서 풀 수 없다.
 - 사실 탐욕 기법을 활용하면 (정답을 도출한다고 가정할 때)완전 탐색을 하는 것보다 훨씬 효율적이다.
 - 하지만 모든 경우에 그리디적 접근이 최적해가 되진 않는다.
 - 이 문제의 경우도 왼쪽부터 오른쪽 순서로 가중치가 형성되는데 탐욕적인 접근을 통해서는 최적해가 도출되지 않는 경우가 있다.

32888을 2회 교환하여 최댓값을 찾는다고 생각해보자
 - 실제 최댓값은 88832이 나와야 하지만
 - 그리디적으로 접근하면 88823이 나온다.
    교환전     3  2  8  8  8
     - 3은 가중치가 가장 낮은 가장 뒤의 8과 교환
     - 교환을 하는 조건을 가중치가 높은 앞자리에 최대한 큰 수가 오도록 해보면 아래와 같이 1회 교환을 할 수 있다.
    1회 교환 - 8  2  8  8  3
     - 3을 제일 뒤로 보내고 8을 앞으로 가지고 온다.
     - 그 다음 교환도 가중치를 고려하여 2를 가장 뒤에 있는 8과 교환한다.
    2회 교환 -  8  8  8  2  3
     - 모든 8을 가중치가 가장 큰 앞으로 위치 시켰지만 실제 2회 교환의 최대는 아래와 같은 과정을 통해 88832다.

    교환 전    3  2  8  8  8
    1회 교환 - 8  2  8  3  8
    2회 교환 - 8  8  8  3  2

만약 교환 횟수를 2회가 아닌 1회라고 한다면?
32888은 가장 뒤에있는 8과 위치를 바꿔야 최대가 된다.
 - 82883
만약 뒤에서 두 번째에 있는 8과 위치를 바꾼다면? 아래처럼 최대가 되지 않는다.
 - 82838
"""

# 완전 탐색 활용 (가지치기)
def solve(k):                           # k -> 교환 횟수
    global ans
    val = int(''.join(cards))           # 숫자 카드

    if val in visited[k]: return        # 이미 체크 했다면 종료
    visited[k].add(val)                 # 아니라면 해당 숫자 조합을 추가

    if k == cnt:                        # 모든 카드를 교환 했다면(주어진 횟수만큼 교환)
        ans = max(ans, val)             # 최대 금액을 갱신
    else:
        # 카드 조합 -> 최댓값 갱신
        for i in range(num_of_cards-1):
            for j in range(i+1, num_of_cards):
                cards[i], cards[j] = cards[j], cards[i]  # 변경하고
                solve(k+1)                               # 다음 확인
                cards[i], cards[j] = cards[j], cards[i]  # 원복

import sys
sys.stdin = open('input.txt')
T = int(input())
for tc in range(1, T+1):
    arr = list(input().split())
    cards, cnt = list(arr[0]), int(arr[1]) # cards: 카드 목록, cnt: 최대 교환 횟수
    num_of_cards = len(cards)              # 카드 숫자(최대 자릿수 6)
    visited = [set() for _ in range(11)]   # 최대 10회 교환(set을 활용한 중복 제거) -> 체크한 숫자 조합 파악 -> 인덱스가 의미하는 건 교환 횟수 -> ex. 0번 인덱스는 0회 교환 할 때의 숫자 조합 / 1번 인덱스는 1회 교환 할 때의 숫자 조합 
    ans = 0
    solve(0)                               # 0회 교환 -> k번 교환이 일어났을 때의 상황
    print('#{} {}'.format(tc, ans))