#1-1. 문제 풀이를 위한 기본 접근법

"""
간단하게 살펴본 과정

N의 크기가 3일 때 0, 0부터 2, 2까지 갈 수 있는 모든 경로의 수는 6가지
- 아래/오른쪽의 조합으로 만들 수 있다.
N = 3
4! / 2!*2! -> 6
모든 경우의 수 구해서 두개씩 2!2!

N = 4
6! / 3!*3! -> 20

(0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2)
(0, 0) -> (1, 0) -> (1, 1) -> (2, 1) -> (2, 2)
...
"""

def dfs(r, c):
    global cnt
    if r == N - 1 and c == N - 1: # 도착지점에 도착한 경우
        cnt += 1                  # 값 누적 (해당 경우의 수 하나 누적)
    else:                         # 도착하지 않았다면
        if r + 1 < N:             # 아래로 이동 했을 때 범위를 벗어나지 않으면
            dfs(r+1, c)           # 아래로 이동
        if c + 1 < N:             # 오른쪽으로 이동 했을 때 범위를 벗어나지 않으면
            dfs(r, c+1)           # 오른쪽으로 이동

N = 3       # 행렬의 크기
cnt = 0     # 가짓수
dfs(0, 0)   # 0, 0에서 시작
print(cnt)